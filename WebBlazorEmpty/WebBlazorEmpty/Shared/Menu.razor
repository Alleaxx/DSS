@inherits DSSComponent

<style>

    .navside ul {
        list-style: none;
        padding: 0;
        margin-top: 0;
    }

        .navside ul a {
            padding: 4px;
            text-decoration: none;
            border-right: 5px solid gainsboro;
        }

            .navside ul a.active {
                background-color: white;
                border-right: 5px solid orange;
                color: black;
                font-weight: 600;
            }

            .navside ul a:hover {
                color: black;
            }

    .navside a {
        cursor: pointer;
    }
</style>
<style>
    .stage-menu a {
        border-top: 1px solid gainsboro;
        border-bottom: 1px solid lightgreen;
        border-left: 2px solid lightgreen;
    }

        .stage-menu a.warning {
            border-bottom-color: #cccc10;
            border-left-color: #cccc10;
        }

        .stage-menu a.error {
            border-bottom-color: red;
            border-left-color: red;
        }

        .stage-menu a.none {
            display: none;
        }

    .stage-menu-header {
        text-align: center;
        font-size: 1.15em;
    }

    .stage-menu-element {
        display: flex;
        align-items: center;
    }

    .stage-element-image {
        width: 10%;
        flex-basis: 10%;
        margin: 0 10px;
        opacity: 50%;
    }

    .active .stage-element-image {
        opacity: 100%;
    }

    .stage-element-name {
        flex-basis: 90%;
        font-family: "Calibri Light";
        font-size: 1.4em;
    }

    ul.relations {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        padding: 5px 20px;
    }

        ul.relations a {
            display: block;
            font-size: 0.8em;
            border-top-right-radius: 3px;
            border-bottom-right-radius: 3px;
            border-right: 5px solid gainsboro;
            padding: 5px 10px;
            margin: 0 3px;
        }
</style>

<style>
    .task-menu {
    }

    .task-menu-header {
        text-align: center;
        font-size: 1.15em;
    }

    .task-menu-element {
        display: flex;
        align-items: center;
        opacity: 75%;
    }

        .task-menu-element.active {
            opacity: 100%;
        }


    .task-element-sheme {
        flex-basis: 15%;
    }


    .task-element-header {
        flex-basis: 85%;
    }

    .task-element-name {
        font-size: 0.9em;
        margin: 0;
        font-weight: 500;
    }

    .task-element-descr {
        color: gray;
        font-size: 0.8em;
        margin: 3px 0;
    }

    a.active .task-element-descr {
        font-weight: normal;
    }

    .task-menu li {
        border-bottom: 1px solid gainsboro;
    }
</style>

<nav class="navside">
    <section class="stage-menu">
        <h2 class="stage-menu-header">Этапы решения</h2>
        <ul>
            <li>
                <NavLink class="@($"stage-menu-element {Hier.GetClass()}")" href="@Hier.Href">
                    <img class="stage-element-image" src="Images/Иерархия.png" />
                    <span class="stage-element-name">I ИЕРАРХИЯ</span>
                </NavLink>
            </li>
            <li>
                <NavLink class="@($"stage-menu-element {View.GetClass()}")" href="@View.Href">
                    <img class="stage-element-image" src="Images/Отношения.png" />
                    <span class="stage-element-name">II ОБЗОР</span>
                </NavLink>
            </li>
            <li>
                <ul class="relations">
                    @foreach (var criteria in Problem.NodesWithRels)
                    {
                        <li>
                            <NavLink style="@($"margin-left:{criteria.Level * 2}em")" class="@($"{StageRelation(criteria).GetClass()}")" href="@($"{StageRelation(criteria).Href}")">
                                II - @Problem.NodesWithRels.ToList().IndexOf(criteria): @criteria.Name
                            </NavLink>
                        </li>
                    }
                </ul>
            </li>
            <li>
                <NavLink class="@($"stage-menu-element {Res.GetClass()}")" href="@Res.Href">
                    <img class="stage-element-image" src="Images/Результаты.png" />
                    <span class="stage-element-name">III РЕЗУЛЬТАТЫ</span>
                </NavLink>
            </li>
        </ul>
    </section>

    <section class="task-menu">
        <h2 class="task-menu-header">Открытые задачи</h2>
        <ul>
            @foreach (var project in DSS.Ex.Projects)
            {
                <li>
                    <a class="task-menu-element @(project.Problem == DSS.Ex.Problem ? "active" : "")" @onclick="@(() => { DSS.Ex.SelectProblem(project); })" href="view">
                        <div class="task-element-sheme">
                            <WebBlazorEmpty.Pages.HierSheme Project="@project" />
                        </div>
                        <header class="task-element-header">
                            <h4 class="task-element-name">@project.Problem.MainGoal.Name</h4>
                            <p class="task-element-descr">@project.Status</p>
                        </header>
                    </a>
                </li>
            }
        </ul>
    </section>
</nav>

@code{
    protected override void OnInitialized()
    {
        base.OnInitialized();
        DSS.Ex.Problem.RelationValueChanged += Updated;
        DSS.Ex.ProjectChanged += (IProject proj) => Updated();
    }
    private void RelationValue_Changed(Relation<INode, INode> changedRelation)
    {
        StateHasChanged();
    }
    private void Updated()
    {
        StateHasChanged();
    }

    private IStage StageRelation(INode node) => Project.StageRelations[Problem.FirstRequiredRelation(node)];
}


