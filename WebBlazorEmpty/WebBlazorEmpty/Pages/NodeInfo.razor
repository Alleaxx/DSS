@page "/node/{level:int}/{nodeName}"
@inherits DSSComponentNode
@layout EditorLayout

<style>
    .row-flex-flex{
        display: flex;
        flex-flow: row;
    }
    .edit{
        flex-basis: 25%;
        padding-right: 20px;
    }
    .rels{
        flex-basis: 45%;
        margin-left: 20px;
    }
    .structure {
        flex-basis: 30%;
        border-right: 1px solid gainsboro;
        border-left: 1px solid gainsboro;
    }
    .structure a{
        text-decoration: none;
    }
    .structure a:hover{
        text-decoration: underline;
    }
    .structure h4{
        margin: 8px 0;
    }
    .rels a{
        text-decoration: none;
        margin-top: 2px;
    }
    .rels a:hover{
        text-decoration: none;
    }

    dt{
        margin-bottom: 5px;
    }
</style>

<section class="row-flex-flex">
    <div class="edit">
        <h4>Редактирование узла</h4>
        <dl>
            <dt>
                Название:
            </dt>
            <dd>
                <input type="text" @bind-value="@Node.Name" />
            </dd>
            @*<dt>
                Описание
            </dt>
            <dd>
                <input type="text" @bind-value="@Node.Description" />
            </dd>*@
        </dl>
    </div>
    <div class="rels">
        <h4>Отношения</h4>
        @if (Problem.RelationsAll.Where(r => r.From == Node).Count() > 0)
        {
            <ul>
                @foreach (var relGroup in Problem.RelationsAll.Where(r => r.From == Node && r.To != Node).GroupBy(r => r.Main))
                {
                    <li>
                        По '@relGroup.Key.Name':
                        <ul>
                            @foreach (var rel in relGroup)
                            {

                                <li>
                                    <NavLink href="@($"relation-new/{Problem.RelationsAll.ToList().IndexOf(rel)}")">
                                        @NodeRelation.GetTextRelationFor(rel) <i>@rel.To.Name</i>
                                    </NavLink>
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>Отношений с элементами этого же уровня нет</p>
        }
    </div>
    <div class="structure">
        <h4>Выше</h4>
        <ul>
            @if (Problem.Dictionary.ContainsKey(Node.Level - 1))
            {

                @foreach (var node in Problem.Dictionary[Node.Level - 1])
                {
                    @if (node != Node)
                    {
                        <li>
                            <NavLink href="@($"/node/{node.Level}/{node.Name}")">
                                @node.Name
                            </NavLink>
                        </li>
                    }
                }
            }
        </ul>
        <h4>Соседние узлы</h4>
        <ul>
            @foreach (var node in Problem.Dictionary[Node.Level])
            {
                @if (node != Node)
                {
                    <li>
                        <NavLink href="@($"/node/{node.Level}/{node.Name}")">
                            @node.Name
                        </NavLink>
                    </li>
                }
            }
        </ul>
        <h4>Ниже</h4>
        <ul>
            @if (Problem.Dictionary.ContainsKey(Node.Level + 1))
            {

                @foreach (var node in Problem.Dictionary[Node.Level + 1])
                {
                    @if (node != Node)
                    {
                        <li>
                            <NavLink href="@($"/node/{node.Level}/{node.Name}")">
                                @node.Name
                            </NavLink>
                        </li>
                    }
                }
            }
        </ul>
    </div>
</section>

<section>
    <h4>Матрица коэффициентов для уровня данного критерия</h4>
</section>
<NodeMatrixAlpha Node="@Node" />


@code {


}