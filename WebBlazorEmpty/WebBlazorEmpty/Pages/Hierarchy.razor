@page "/hierarchy"
@inherits DSSComponent
@layout EditorLayout



<style>
    .basic-border {
        border: 1px solid gainsboro;
        border-radius: 3px;
        margin: 3px;
        padding: 5px;
    }

    .sheme {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }



    .col-own {
        display: flex;
        flex-direction: column;
    }

    .level {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid gainsboro;
    }


    .level-name {
        text-align: center;
        width: 150px;
    }

    .level-index {
        color: gray;
        font-size: 0.9em;
    }

    .level-elements {
        display: flex;
        flex-flow: row wrap;
        justify-content: center;
        margin: 5px 0;
    }

    .level-add {
    }

    .node-element {
        display: flex;
        padding: 2px 5px;
        padding-right: 0;
        margin: 8px;
        border: 1px solid gray;
        min-width: 15%;
        border-radius: 2px;
    }

    .add {
        color: green;
        border: 2px solid lightgreen;
        background: transparent;
        padding: 5px 30px;
        font-size: 1em;
    }

        .add:hover {
            background-color: lightgreen;
            cursor: pointer;
        }

    .remove {
        color: red;
        font-size: 1em;
        margin: 0;
        padding: 5px 8px;
        background-color: transparent;
        border: 0;
        border-left: 1px solid gainsboro;
    }

        .remove:hover {
            background-color: lightpink;
            cursor: pointer;
        }


    .input-text {
        width: 100%;
        font-size: 0.85em;
        border: 0;
        padding: 10px 0;
        text-align: center;
    }

    .confirm {
        margin: 10px;
        display: flex;
        align-items: center;
    }

        .confirm .add {
            margin: 0 2em;
        }

        .hier-fails{
            display: flex;
            margin: 0 10px;
        }
        .hier-fail{
            border: 2px solid red;
            border-radius: 3px;
            font-size: 0.8em;
            width: 2em;
            cursor: pointer;
            text-align: center;
            padding: 1px 4px;
            margin: 0 4px;
        }
        .hier-fail:hover{
            background-color: lightpink;
        }

    .main-goal-level {

    }
    .main-goal-level .level-index{
        display:none;
    }
    .main-goal-level .level-name{
        font-size: 1.4em;
    }
    .main-goal-level br{
        display: none;
    }
    .main-goal-level .level-add{
        visibility: hidden;
    }
        .main-goal-level .node-element {
            min-width: 14em;
            font-size: 1.25em;
        }
        .main-goal-level .remove{
            display: none;
        }




    .new-level {
        padding: 10px 0;
    }
        .new-level .level-name{
            color: gray;
        }

    .information {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        border-top: 1px solid whitesmoke;
        border-bottom: 1px solid whitesmoke;
        padding: 14px 0;
        margin: 5px 10px;
        font-size: 0.9em;
    }

    .property-name {
        color: gray;
    }

    .property-value {
        margin-right: 2em;
        margin-left: 4px;
    }

    .not-saved, .all-saved, .warning {
    }

    .not-saved {
        color: darkgoldenrod;
    }

    .warning {
        color: darkred;
    }

    .all-saved {
        color: green;
    }
</style>

<h2 class="content-header-h">Редактирование иерархии задачи выбора</h2>
<div class="sheme basic-border">
    <div class="confirm">
        <div>
            @if (Project.UnsavedChanged && HierEditState.Result)
            {
                @*<span class="not-saved">Есть несохраненные изменения</span>*@
                <input class="add" type="button" value="Подтвердить текущую иерархию" @onclick="UpdateHierarchy" />
            }
            else if (Project.UnsavedChanged && !HierEditState.Result)
            {
                <span class="warning">В структуре иерархии обнаружены ошибки:</span>
            }
            else
            {
                <span class="all-saved">Все изменения сохранены</span>
                <NavLink class="navigation-link" href="@View.Href">
                    Обзор задачи
                </NavLink>
            }
        </div>
        <div class="hier-fails">
            @foreach (var check in HierEditState.Checks)
            {
                <div class="@check.GetClass()" title="@check.Message">
                    @check.Name
                </div>
            }
        </div>
    </div>

    <div class="information">
        <div>
            <span class="property-name">Уровней: </span>
            <span class="property-value">@ProblemEditing.LevelsCount</span>
        </div>
        <div>
            <span class="property-name">Узлов: </span>
            <span class="property-value">@ProblemEditing.NodesCount</span>
        </div>
        <div>
            <span class="property-name">Отношений: </span>
            <span class="property-value">@ProblemEditing.RelationsCount</span>
        </div>
        <div>
            <span class="property-name">~ Времени на решение: </span>
            <span class="property-value">@ProblemEditing.EstTime.Minutes мин. @ProblemEditing.EstTime.Seconds сек.</span>
        </div>
    </div>

    <div>
        @foreach (var levelGroup in ProblemEditing.GroupedByLevel)
        {
            <section class="level @(levelGroup.Key == 0 ? "main-goal-level" : "")">
                <div class="level-name">
                    <span class="level-index">Уровень @levelGroup.Key</span>
                    <br>
                    <span>@(HierarchyN.GetTextInfo(ProblemEditing,levelGroup.Key))</span>
                    <br />

                </div>
                <div class="level-elements">
                    @foreach (var node in levelGroup)
                    {
                    <div class="node-element">
                        <input class="input-text" type="text" @bind-value="@node.Name" />
                        <input class="remove" type="button" value="X" @onclick="@(() => RemoveNode(node))" />
                    </div>
                    }
                </div>

                <div class="level-add">
                    <input class="add" type="button" value="+" @onclick="@(() => AddNode(levelGroup.Key))" />
                </div>

            </section>
        }
    <section class="level new-level">
        <div class="level-name">
            <span>Уровень @ProblemEditing.LevelsCount</span>
        </div>
        <input class="add " type="button" value="++" @onclick="@(() => AddNode(ProblemEditing.LevelsCount))" />
        <input class="add" type="button" value="+" style="visibility:hidden"/>
    </section>

    </div>
</div>



@code {
    private IHierarchy ProblemEditing => Project.ProblemEditing;
    private List<INode> NodesEditing => Project.NodesEditing;


    //Подтверждение иерархии
    private void UpdateHierarchy() => Project.UpdateProblem();


    //Редактирование иерархии
    private void AddNode(int level = -1)
    {
        level = level == -1 ? ProblemEditing.LevelsCount - 1 : level;
        INode newNode = new Node(level, "Узел");
        NodesEditing.Add(newNode);
    }
    private void RemoveNode(INode e)
    {
        if (e != ProblemEditing.MainGoal)
            NodesEditing.Remove(e);
    }
}
