@inherits DSSComponent

<section class="sheme">
    @foreach (var levelGroup in ProjectSheme.ProblemActive.GroupedByLevel)
    {
        <div class="level">
            @if (ShowHeaders)
            {
                <div class="level-name">
                    <span class="level-index">Ур. @levelGroup.Key -</span>
                    <span class="level-text">@levelGroup.First().LevelName</span>
                </div>
            }
            <div class="level-elements">
                @foreach (var node in levelGroup)
                {
                    <a class="node-element @(GetClass(node))" href="@LinkType" @onclick="() => SetNowMatched(node)">
                        <span>
                            @if (DisplayProperty != null)
                            {
                                @FormatNumber(DisplayProperty(node)) <span>| </span>
                            }
                            @node.Name
                        </span>
                    </a>
                }
            </div>
        </div>
    }
</section>



@code {
    [Parameter]
    public IProject ProjectSheme { get; set; }

    [Parameter]
    public bool ShowHeaders { get; set; } = true;
    [Parameter]
    public Func<INode, double> DisplayProperty { get; set; } = (node) => node.Coefficient;

    [Parameter]
    public ViewSelections ViewSelection { get; set; } = HierShemeBig.ViewSelections.Selection;
    public enum ViewSelections
    {
        Selection, Best, Relations
    };

    [Parameter]
    public string LinkType { get; set; } = "relation-edit";

    private void SetNowMatched(INode node)
    {
        if(ViewSelection == ViewSelections.Selection)
        {
            ProjectSheme.SetNow(node);
        }
        else
        {
            ProjectSheme.SetNow(ProjectSheme.ProblemActive.FirstRequiredRelation(node));
        }
    }

    private string GetClass(INode node)
    {
        string tag = "usual";

        switch (ViewSelection)
        {
            case ViewSelections.Best:
                if (ProjectSheme.ProblemActive.Best(node.Level).Contains(node))
                    return "best";
                break;
            case ViewSelections.Relations:
                double res = ProjectSheme.ProblemActive.GetMtxRelations(node).Consistency.Cr;
                if (ProjectSheme.ProblemActive.CorrectnessRels.IsNodeUnknown(node))
                    return "warn";
                if (!ProjectSheme.ProblemActive.CorrectnessRels.IsNodeConsistenct(node))
                    return "bad";
                return "good";
            case ViewSelections.Selection:
                if (node == ProjectSheme.NodeSelected)
                    return "good";
                break;
        }
        return tag;
    }
}

