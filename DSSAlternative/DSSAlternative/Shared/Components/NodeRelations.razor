@inherits DSSComponentParamNode

<section class="criteria-relations">
    <h3 class="rel-menu-list-header @NodeRelClass()">
        @Node.Name  [@FormatNumber(Cr)]
    </h3>
    <ul class="rel-menu-list">
        @foreach (var relation in ShowedRelations())
        {
            <li>
                <a class="rel-menu-element @RelationClass(relation)" @onclick="() => SetNow(relation)" href="@RelationsLink">
                    @RelationView.Invoke(relation)
                </a>
            </li>
        }
    </ul>
    <p class="criteria-state">
        @if (ShowState)
        {
            @if (IsNotConsistenct)
            {
                <span><b>↑</b> Нужна корректировка согласованности</span>
            }
            else if (IsUnknown)
            {
                <span><b>↑</b> Нужно заполнение</span>
            }
            else
            {
                <span><b>✓</b> Всё в порядке</span>
            }
        }
    </p>
</section>

@code {
    [Parameter]
    public Predicate<INodeRelation> RelationFilter { get; set; } = rel => true;

    [Parameter]
    public bool ShowState { get; set; } = true;

    [Parameter]
    public RenderFragment<INodeRelation> RelationView { get; set; }


    private bool IsNotConsistenct => !RelationState.IsNodeConsistenct(Node);
    private bool IsUnknown => RelationState.IsNodeUnknown(Node);
    public double Cr => Problem.GetMtxRelations(Node).Consistency.Cr;


    private string NodeRelClass()
    {
        var rel = Problem.FirstRequiredRelation(Node);
        return RelationClass(rel);
    }
    private string RelationClass(INodeRelation rel)
    {
        return new CssRelation(Project, rel).CssClass();
    }

    private IEnumerable<INodeRelation> ShowedRelations()
    {
        return Problem.RelationsRequired.Where(r => r.Main == Node && RelationFilter.Invoke(r));
    }
}
