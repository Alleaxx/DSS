@page "/relation-edit"
@inherits DSSProject
@layout EditorLayout


<style>
    .relations-grid {
        display: grid;
        grid-template-columns: 7fr 3fr;
        grid-template-areas: "relation menu";
    }

    .relation-area {
        grid-area: relation;
        padding: 10px;
    }
    /*    .relation-area .matrix{
        border: 0;
    }*/

    .relation-current-header {
        text-align: center;
        font-size: 1.15em;
        margin-bottom: 0;
    }

    .stage-area {
        display: flex;
    }

        .stage-area a {
            flex-basis: 50%;
            text-align: center;
            color: black;
            padding: 8px 0;
            border: 1px solid lightgreen;
        }

            .stage-area a:hover {
                background-color: lightgreen;
            }

    .node-edit {
        font-size: 0.9em;
    }


    .menu-area {
        grid-area: menu;
        padding: 10px;
    }

    .rel-menu-header {
        font-size: 1.2em;
    }

    .rel-menu-list-header {
        font-size: 1em;
        font-weight: 400;
        margin: 4px 0;
        padding-bottom: 3px;
        margin-bottom: 0;
    }

        .rel-menu-list-header.safe {
            border-bottom: 1px solid gainsboro;
        }

        .rel-menu-list-header.warning {
            border-bottom: 1px solid #cccc10;
        }

        .rel-menu-list-header.error {
            border-bottom: 1px solid red;
        }

    .rel-menu-element {
        font-size: 0.8em;
        color: black;
        padding: 4px 0;
        border-bottom: 1px solid gainsboro;
        text-decoration: none;
        cursor: pointer;
        border-left: 2px solid gainsboro;
        border-right: 1px solid gainsboro;
        padding: 5px;
        display: block;
    }

        .rel-menu-element.safe {
            border-right: 1px solid lightgreen;
            border-bottom: 1px solid lightgreen;
        }

        .rel-menu-element.warning {
            border-right: 1px solid #cccc10;
            border-bottom: 1px solid #cccc10;
        }

        .rel-menu-element.error {
            border-right: 1px solid red;
            border-bottom: 1px solid red;
        }


        .rel-menu-element:hover {
            background-color: whitesmoke;
        }

    .rel-menu-list {
        list-style: none;
        margin: 5px 0;
        margin-top: 0;
    }

    .rel-menu-element.active {
        border-left: 5px solid orange;
    }


    .criteria-state {
        font-size: 0.85em;
        color: black;
        margin-left: 2em;
    }

    .criteria-relatons {
    }

    .inner-matrix {
    }

    .inner-matrix-name {
        display: inline;
        font-weight: 500;
        font-size: 1.1em;
    }

    .rel-menu-list .selected{
        font-weight: bold;
    }

    .relation-area h4{
        margin: 3px 0;
        font-weight: 500;
    }
</style>
<div class="relations-grid">
    <nav class="menu-area">
        <h2 class="rel-menu-header">Список отношений</h2>
        @foreach (var node in Problem.NodesWithRels)
        {
            <section class="criteria-relatons">
                <h3 class="@($"rel-menu-list-header {Project.GetStageFromNode(node).CssClass()}")">@node.Name</h3>
                <ul class="rel-menu-list">
                    @foreach (var relation in Problem.RelationsRequired.Where(r => r.Main == node))
                    {
                        <li class="@($"{Project.GetStageFromRel(relation).CssClass()} rel-menu-element")" @onclick="() => Project.SetNow(relation as NodeRelation)">
                            @relation.From.Name - @relation.To.Name
                        </li>
                    }
                </ul>
                <p class="criteria-state">
                    @if (!RelationState.IsNodeConsistenct(node))
                    {
                        <span><b>↑</b> Нужна корректировка согласованности</span>
                    }
                    else if (RelationState.IsNodeUnknown(node))
                    {
                        <span><b>↑</b> Нужно заполнение</span>
                    }
                    else
                    {
                        <span><b>✓</b>  Всё в порядке</span>
                    }
                </p>
            </section>
        }
    </nav>


    <style>
        .filters {
            list-style: none;
            display: flex;
        }

            .filters li {
                padding: 5px 15px;
                border-bottom: 1px solid gainsboro;
            }

                .filters li:hover {
                    background-color: gainsboro;
                    cursor: pointer;
                }

            .filters .selected {
                background-color: gainsboro;
            }
    </style>
    <div class="relation-area">
        <h2>Отношение</h2>

        <Tab>
            <TabItem>
                <Title>
                    <h4>Сравнение</h4>
                </Title>
                <ChildContent>
                    <NodeQuestion Relation="@RelationSel" />
                </ChildContent>
            </TabItem>
            <TabItem>
                <Title>
                    <h4>Матрица</h4>
                </Title>
                <ChildContent>
                    <NodeMatrix Node="@RelationSel.Main" />
                </ChildContent>
            </TabItem>
            <TabItem>
                <Title>
                    <h4>Настройки</h4>
                </Title>
                <ChildContent>
                    <NodeRelMoreOptions Relation="RelationSel"></NodeRelMoreOptions>
                </ChildContent>
            </TabItem>
        </Tab>
        <div class="prev-next-stages">
            <style>
                .prev-next-stages {
                    display: flex;
                    justify-content: space-between;
                    text-align: center;
                    margin: 12px 0;
                }
                .prev-next-stages a{
                    text-decoration: none;
                    cursor: pointer;
                    display: block;
                    color: royalblue;
                }
                .prev-next-stages a:hover{
                    color: blue;
                }

                .prev, .next {
                    flex: 2;
                }

                .res {
                    flex: 1;
                }
            </style>
            <div>
                <a class="prev" @onclick="() => Project.SetNow(Prev)">
                    ← предыдущее
                </a>
            </div>
            @if (RelationState.AreCorrect)
            {
                <NavLink class="res" href="@ResultsLink">
                    ПРОСМОТРЕТЬ РЕЗУЛЬТАТ
                </NavLink>
            }
            <div>
                <a class="next" @onclick="() => Project.SetNow(Next)">
                    следующее →
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    public NodeRelation RelationSel => Project.RelationSelected as NodeRelation;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Project.OnRelationChanged += () => StateHasChanged();
    }

    private INodeRelation Prev => Problem.PrevRequiredRel(RelationSel);
    private INodeRelation Next => Problem.NextRequiredRel(RelationSel);
}
