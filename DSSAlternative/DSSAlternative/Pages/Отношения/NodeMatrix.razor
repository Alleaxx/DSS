@inherits DSSComponentNode
@layout EditorLayout


<style>
    .row-usual {
        margin-top: 10px;
    }

    .counts {
        flex-basis: 50%;
        font-size: 0.85em;
    }

    .mtx table {
        border: 1px solid gainsboro;
        border-collapse: collapse;
    }

        .mtx table a {
            text-decoration: none;
        }

            .mtx table a:hover {
                text-decoration: underline;
            }

        .mtx table h4 {
            margin: 5px 0;
        }

    td {
        padding: 10px 6px;
    }

    .good-mtx, .bad-mtx {
        display: flex;
        justify-content: center;
        padding: 0 4px;
    }
    .good-mtx {
        color: green;
    }
    .bad-mtx {
        color: darkred;
    }

    .mtx input {
        border: 0;
        width: 94%;
        text-align: right;
        border: 1px solid transparent;
        max-width: 10em;
        height: 30px;
    }

        .mtx input[disabled] {
            color: gray;
        }


    .cell-header{
        border-bottom: 1px solid gainsboro;
        text-align: center;
    }
    .cell-node{
        text-align: right;
        font-size: 0.8em;
        min-width: 4.5em;
        padding-left: 5px;
        padding-right: 5px;
        border-bottom: 1px solid gainsboro;
        border-right: 1px solid gainsboro;
    }
    td.cell-value {
        padding: 0;
        max-width: 10em;
    }

    .cell-selected input{
        border-color: gainsboro;
    }
    .cell-mirrored input{
        border: 1px solid green;
    }

    .incorrect input {
        color: red;
    }
    .unknown input {
        color: darkorange;
    }
</style>

@if (IsEmpty())
{
<div>
    <div class="mtx">
        <table>
            @*<colgroup>
                    <col style="width:25%" />
                </colgroup>*@
            <tbody>
                <tr>
                    <td class="cell-header" colspan="@(1 + Node.LowerNodesControlled.Length)">
                        <div class="@(Mtx.Consistency.IsCorrect() ? "good-mtx" : "bad-mtx")">
                            <h4>
                                <b>@Node.Name</b>  @(Mtx.Consistency.IsCorrect() ? "✓" : "X")
                            </h4>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="cell-node">
                        &nbsp;
                    </td>
                    @foreach (var node in Node.LowerNodesControlled)
                    {
                        <td class="cell-node">
                            <a href="@NodeLink" @onclick="() => SetNow(node)">
                                @node.Name
                            </a>
                        </td>
                    }
                </tr>
                @foreach (var node in Problem.RelationsGroupedMain(Node))
                {
                    <tr>
                        <td class="cell-node">
                            <a href="@NodeLink" @onclick="() => SetNow(node.Key)">
                                @node.Key.Name
                            </a>
                        </td>
                        @foreach (var relation in node)
                        {
                            <td class="@RelationClass(relation)">
                                <input disabled="@Disabled(relation)" type="text" @bind-value="@relation.Value" @onfocus="@(() => RelationSelected = relation)" />
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>



    @if (RelationSelected != null)
    {
        @*<div class="relation-sel">
                <NodeQuestion RelationUpdated="@(() => StateHasChanged())" Relation="@RelationSelected" />
            </div>*@
    }

    <div class="counts" hidden>
        <details>
            <summary>
                <span>Подробные расчеты</span>
            </summary>
            <dl>
                <dt>nmax</dt>
                <dd>@Mtx.Consistency.Nmax</dd>
                <dt>CI</dt>
                <dd>@Mtx.Consistency.CI</dd>
                <dt>RI</dt>
                <dd>@Mtx.Consistency.RI</dd>
                <dt>CR </dt>
                <dd>@Mtx.Consistency.Cr</dd>

                <dt>Локальные коэффициенты</dt>
                <dd>
                    <details>
                        <ul>
                            @foreach (var coeff in Mtx.Coeffiients)
                            {
                                <li>@coeff</li>
                            }
                        </ul>
                    </details>
                </dd>


                <dt>Вектор произведения матрицы отношений и локальных коэффициентов</dt>
                <dd>
                    <details>
                        <ul>
                            @foreach (var coeff in Mtx.Consistency.MultiMatrixLocalCoeffs)
                            {
                                <li>@coeff</li>
                            }
                        </ul>
                    </details>
                </dd>

            </dl>
        </details>
    </div>

    <datalist>
        <option value="1">1</option>
        <option value="1">2</option>
        <option value="1">3</option>
        <option value="1">4</option>
        <option value="1">5</option>
        <option value="1">6</option>
        <option value="1">7</option>
        <option value="1">8</option>
        <option value="1">9</option>
    </datalist>
</div>
}
else
{
    <p>Матрица для данного критерия пуста</p>
}

@code {
    [Parameter]
    public IEnumerable<INodeRelation> AllowedRelations { get; set; }

    private INodeRelation RelationSelected { get; set; }

    private bool Disabled(INodeRelation relation)
    {
        if (AllowedRelations != null && !AllowedRelations.Contains(relation))
        {
            return true;
        }
        if (relation.Self)
        {
            return true;
        }
        return false;
    }

    private bool IsEmpty()
    {
        return Node.LowerNodesControlled.Length > 0;
    }

    private string RelationClass(INodeRelation rel)
    {
        List<string> classes = new List<string>() { "cell-value" };
        if(rel == RelationSelected)
        {
            classes.Add("cell-selected");
        }
        if(RelationSelected != null && rel == RelationSelected.Mirrored)
        {
            classes.Add("cell-mirrored");
        }
        if(rel.Value == 0)
        {
            classes.Add("unknown");
        }
        if (!Mtx.Consistency.IsCorrect())
        {
            classes.Add("incorrect");
        }

        return string.Join(" ", classes);
    }
}
