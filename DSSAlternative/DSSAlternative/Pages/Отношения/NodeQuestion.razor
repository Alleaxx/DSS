@inherits DSSComponentRelation
@layout EditorLayout

<style>
    .matrix {
        margin: 5px;
        width: 100%;
        border-collapse: collapse;
    }

    .matrix th, .matrix td {
        padding: 8px 24px;
        text-align: center;
        border: 5px solid transparent;
        border-top: 0;
        border-bottom: 0;
    }

    .matrix .selectable{
        font-size: 0.9em;
    }
    .matrix .selectable:hover {
        cursor: pointer;
        border-right: 5px solid gainsboro;
        border-left: 5px solid gainsboro;
    }

    .matrix .selected {
        border-right: 5px solid orange;
        border-left: 5px solid orange;
        color: black;
    }

    td.from{

    }
    td.to{

    }
    td.united{

    }
    td.between{
        border: 0;
    }

    .matrix .main-node{
        border: 0;
    }
    .matrix .side-node{
        border: 0;
    }

    .main-node h3 {
        margin: 5px 0;
    }

    .side-node {
        font-size: 1.1em;
    }

    .matrix a {
        text-decoration: none;
        color: royalblue;
    }
    .matrix a:hover {
        color: blue;
    }


    .matrix.selectable {
        color: #323232;
    }
    
    .matrix .safe {
        background-color: #efffef;
    }
    .matrix .dangerous {
        background-color: #fff7f8;
    }

    .matrix .results-message{
        padding: 20px 0;
        border-bottom: 1px solid gray;
        border-top: 1px solid gray;
        text-align: center;
    }
</style>



<section>
    <table class="matrix" @onclick="@RelationUpdated">
        <colgroup>
            <col style="width:40%" />
            <col style="width:20%" />
            <col style="width:40%" />
        </colgroup>
        <tbody>
            <tr>
                <th class="main-node united" colspan="3">
                    <a href="@NodeLink" @onclick="() => SetNow(Relation.Main)">
                        <h3>
                            @Relation.Main.Name
                        </h3>
                    </a>
                </th>
            </tr>
            <tr>
                <th class="side-node from">
                    <NavLink href="@NodeLink" @onclick="() => SetNow(Relation.From)">
                        @Relation.From.Name
                    </NavLink>
                </th>
                <td style="@((Relation.Value == 0) ? RatingNone.CssStyle() : "")" class="between @GetClassSel(Relation.From, RatingNone)" @onclick="@(() => Relation.SetRating(RatingNone))">
                    ???
                </td>
                <th class="side-node to">
                    <NavLink href="@NodeLink" @onclick="() => SetNow(Relation.To)">
                        @Relation.To.Name
                    </NavLink>
                </th>
            </tr>


            <tr>
                <td colspan="3" style="@((Relation.Value == 1) ? RatingEqual.CssStyle() : "")" class="united @GetClassSel(Relation.From, RatingEqual)" @onclick="() => Relation.SetRating(RatingEqual)">
                    @RatingEqual.Name
                </td>
            </tr>
            @foreach (var group in Ratings)
            {
                <tr>
                    <td title="@group.forRating.Value" style="@((group.forRating.CheckEqual(Relation.Rating)) ? group.forRating.CssStyle() : "")" class="from @GetClassSel(Relation.From, group.forRating)" @onclick="@(() => Relation.SetRating(group.forRating))">
                        @group.forRating.Name
                    </td>
                    <td class="between">
                        &nbsp;
                    </td>
                    <td title="@group.forRating.Value" style="@((group.toRating.CheckEqual(Relation.Rating)) ? group.toRating.CssStyle() : "")" class="to @GetClassSel(Relation.To, group.toRating)" @onclick="@(() => Relation.SetRating(group.toRating))">
                        @group.toRating.Name
                    </td>
                </tr>
            }

            <tr>
                <td colspan="3" class="results-message">
                    '@Relation.From.Name' @Relation.GetTextRelation() '@Relation.To.Name'
                </td>
            </tr>

        </tbody>
    </table>
    <div style="display:flex; justify-content: center">
        <div class="example-section">
            <div class="example-block" style="background-color: #efffef"></div>
            <span class="example-description">
                - Согласованность
            </span>
        </div>
        <div class="example-section">
            <div class="example-block" style="background-color: #fff7f8"></div>
            <span class="example-description">
                - Рассогласованность
            </span>
        </div>
        <div class="example-section">
            <div class="example-block" style="background-color: white"></div>
            <span class="example-description">
                - Неизвестно
            </span>
        </div>
    </div>
</section>


@code {
    [Parameter]
    public EventCallback RelationUpdated { get; set; }
    [Parameter]
    public bool UseSafeWarnings { get; set; } = true;

    private IRating RatingNone => DSSApp.RatingSystem.RatingNone;
    private IRating RatingEqual => DSSApp.RatingSystem.RatingEqual;
    private IEnumerable<(IRating forRating, IRating toRating)> Ratings => DSSApp.RatingSystem.RatingsFor(Relation);

    private string GetClassSel(INode node, IRating rating)
    {
        string selState = "selectable";
        if(rating.CheckEqual(Relation.Rating))
        {
            selState = "selected";
        }
        return $"{selState} {GetClass(node, rating)}";
    }
    private string CheckNone(INode node)
    {
        return GetClassSel(node, RatingNone);
    }



    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        FromMtx.Clear();
        ToMtx.Clear();
        if (UseSafeWarnings && !Problem.GetMtxRelations(Relation.Main).WithZeros())
        {
            CreateMatrixes();
        }
    }
    private void CreateMatrixes()
    {
        FromMtx.Add(1, GetMatrixForRating(1));
        foreach (var rating in Ratings)
        {
            double value = rating.forRating.Value;
            FromMtx.Add(value, GetMatrixForRating(value));
            ToMtx.Add(value, GetMatrixForRating(1 / value));
        }
    }
    private IMatrix GetMatrixForRating(double value)
    {
        IMatrixRelations source = Problem.GetMtxRelations(Relation.Main);
        source.Change(Relation.From, Relation.To, value);
        return source;
    }

    Dictionary<double, IMatrix> FromMtx { get; set; } = new Dictionary<double, IMatrix>();
    Dictionary<double, IMatrix> ToMtx { get; set; } = new Dictionary<double, IMatrix>();

    private string GetClass(INode node, IRating r)
    {
        Dictionary<double, IMatrix> dictionary = node == Relation.From ? FromMtx : ToMtx;
        if (dictionary.ContainsKey(r.Value))
        {
            return dictionary[r.Value].Consistency.IsCorrect() ? "safe " : "dangerous ";
        }
        return "usual ";
    }
}
