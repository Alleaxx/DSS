@page "/relation/{relIndex:int}"
@inherits DSSComponentRelation
@layout EditorLayout

<style>
    table.matrix {
        border-radius: 3px;
        padding: 5px;
        margin: 5px;
        width: 100%;
        table-layout: fixed;
    }

    .matrix th, .matrix td {
        padding: 8px 24px;
        text-align: center;
    }

    .matrix th {

    }

    .matrix .selectable:hover {
        cursor: pointer;
        color: black;
    }

    .matrix .selected {

    }


    .value {
        width: 30px;
    }

    .name-cell {
        width: 40%;
        font-size: 1.1em;
    }
    .name-cell a:hover{
        text-decoration: underline;
    }

    .value-cell {
        text-align: center;
    }


    .border-bottom-t {
        border-bottom: 1px solid gainsboro;
    }

    .matrix a {
        text-decoration: none;
        color: black;
        font-size: 1.1em;
        font-weight: 400;
    }

    .matrix a:hover {
        text-decoration: underline;
    }


    .special-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .main-node {
        text-align: center;
    }
    .main-node h3{
        margin: 5px 0;
    }
    .main-node:hover{

    }
    .node-relation{

    }
    .node{
        text-align: center;
        text-decoration: none;
        color: black;
        font-size: 1.35em;
    }
    .node:hover{
        text-decoration: underline;
    }
    .node-rating{
        text-align: center;
        border-right: 1px solid gainsboro;
        border-left: 0;
    }
    .node-rating:hover{
        background-color: whitesmoke;
        cursor: pointer;
    }
    .node-rating .selected{
        background-color: gainsboro;
    }

    .selectable {
        color: #323232;
    }
    .selected {
        border-right: 5px solid orange;
        border-left: 5px solid orange;
        border-radius: 5px;
        color: black;
    }
    
    

    .nodes{
        margin: 15px 5px;
        justify-content: space-around;
    }
    .ratings {
        margin: 5px 5px;
        align-items:stretch;
    }
    .ratings-tr{

    }
        .ratings-tr .safe {
            background-color: #efffef;
        }
        .ratings-tr .dangerous {
            background-color: #fff7f8;
        }

        .

    .new-system{
        padding: 10px 0;
        border: 1px solid gainsboro;
    }

    .clear-relation {
        background: transparent;
        border: 1px solid whitesmoke;
        padding: 5px 15px;
        width: 100%;
        cursor: pointer;
    }
    .clear-relation:hover{
        background-color: lightpink;
    }

    .matrix .results-text{
        padding: 20px 0;
        border-bottom: 1px solid gray;
        border-top: 1px solid gray;
        text-align: center;
    }

    .prev-next-stages a{
        color: blue;
    }
    .prev-next-stages a:hover{
        color: black;
        text-decoration: none;
    }
    .next, .prev{
        display: block;
        margin: auto;
    }

    .errors-list{
        display: flex;
        justify-content: center;
        margin: 10px 0;
    }

    .hier-fail {
        border: 2px solid red;
        border-radius: 3px;
        font-size: 0.8em;
        cursor: pointer;
        text-align: center;
        padding: 4px;
        margin: 0 4px;
    }

        .hier-fail.known {
            border: 1px solid #c1c100;
        }
    .hier-fail.consistent{
        border: 1px solid darkred;
    }

        .hier-fail:hover {
            background-color: lightpink;
        }

    .unknown {
        background-color: whitesmoke;
    }

    .more-options {
        margin-top: 2em;
    }
    .more-options-header{

    }


</style>

<style>
    .actions-section {
        padding: 2px 5px;
        justify-content: center;
        align-items: center;
    }

    .action {
        display: flex;
        padding: 5px 2px;
        border: 1px solid gray;
        border-radius: 2px;
        font-size: 0.7em;
        margin: auto;
        margin-top: 5px;
        margin-bottom: 5px;
        width: 75%;
        align-items: center;
        cursor: pointer;
    }

    .action-header {
        padding: 10px 0;
        border-bottom: 1px solid gainsboro;
    }

    .action-icon {
        height: 20px;
        margin: auto;
        opacity: 50%;
    }

    .more-options a.action:hover {
        color: black;
        text-decoration: none;
    }

        .action:hover .action-icon {
            opacity: 100%;
        }

    .more-options-add {
        font-size: 0.9em;
        color: gray;
    }
    .action-name {
        width: 80%;
        color: black;
        font-size: 0.8em;
    }
    .clear-relations:hover{
        border: 1px solid red;
    }
    .clear-relations:hover .action-name{
        color: red;
    }
</style>



<table class="matrix" @onclick="@RelationUpdated">
    <tbody>
        <tr>
            <th class="main-node border-bottom-t" colspan="2">
                <h3>
                    @Relation.Main.Name
                </h3>
            </th>
        </tr>
        <tr>
            <th class="name-cell border-bottom-t">
                <NavLink href="@(Nodes.Where(n => n.Node == Relation.From).First().Href)">
                    @Relation.From.Name
                </NavLink>
            </th>
            <th class="name-cell border-bottom-t">
                <NavLink href="@(Nodes.Where(n => n.Node == Relation.To).First().Href)">
                    @Relation.To.Name
                </NavLink>
            </th>
        </tr>


        <tr class="ratings-tr">
            <td colspan="2" style="@((Relation.Value == 0) ? RatingNone.GetStyle() : "")" class="@GetClassSel(Relation.From, RatingNone)" @onclick="@(() => Relation.SetRating(RatingNone))">
                Отношения между ними неизвестны
            </td>
        </tr>
        <tr class="ratings-tr">
            <td colspan="2" style="@((Relation.Value == 1) ? RatingEqual.GetStyle() : "")" class="@(GetClassSel(Relation.From, RatingEqual))" @onclick="@(() => Relation.SetRating(RatingEqual))">@RatingEqual.Name</td>
        </tr>
        @foreach (var group in Ratings)
        {
            <tr class="ratings-tr">
                <td style="@((group.forRating.CheckEqual(Relation.Rating)) ? group.forRating.GetStyle() : "")" class="@(GetClassSel(Relation.From, group.forRating))" @onclick="@(() => Relation.SetRating(group.forRating))">
                    @group.forRating.Name
                </td>

                <td style="@((group.toRating.CheckEqual(Relation.Rating)) ? group.toRating.GetStyle() : "")" class="@(GetClassSel(Relation.To, group.toRating))" @onclick="@(() => Relation.SetRating(group.toRating))">
                    @group.toRating.Name
                </td>
            </tr>
        }

        <tr>
            <td colspan="2" class="results-text">
                '@Relation.From.Name' @Relation.GetTextRelation() '@Relation.To.Name'
            </td>
        </tr>

        <tr class="prev-next-stages">
            <td>
                <a class="prev" href="@Prev.Href">
                    ← предыдущее
                </a>
            </td>
            <td>
                <a class="next" href="@Next.Href">
                    следующее →
                </a>
            </td>
        </tr>

        <tr>
            <td colspan="2">
                <details class="more-options">
                    <summary class="more-options-header">
                        Дополнительно
                    </summary>
                    <span class="more-options-add">Состояние</span><br />
                    <div class="errors-list">
                        @foreach (var error in RelState.Errors(Relation.Main))
                        {
                            <div class="hier-fail @(error.GetClass())" title="@error.Message">X @error.Name</div>
                        }
                        @if (RelState.Errors(Relation.Main).Count() == 0)
                        {
                            <span>Матрица согласована и заполнена, всё отлично</span><br />
                        }
                    </div>
                    <span class="more-options-add">Действия</span><br />
                    <div class="actions-section">
                        <a class="action edit-criteria" href="@Nodes.Where(n => n.Node == Relation.Main).First().Href">
                            <span class="action-name">Редактировать критерий и матрицу сравнения</span>
                            <img class="action-icon" src="Images/pencil.png" />
                        </a>
                        <a class="action clear-relations" @onclick="@(() => Problem.ClearRelations(Relation.Main))">
                            <span class="action-name">Сброс всех отношений по данному критерию</span>
                            <img class="action-icon" src="Images/tech.png" />
                        </a>
                    </div>
                </details>
            </td>
        </tr>
    </tbody>
</table>


@code {
    [Parameter]
    public EventCallback RelationUpdated { get; set; }

    private IRating RatingNone => DSS.RatingSystem.RatingNone;
    private IRating RatingEqual => DSS.RatingSystem.RatingEqual;
    private IEnumerable<(IRating forRating, IRating toRating)> Ratings => DSS.RatingSystem.RatingsFor(Relation);

    private string GetClassSel(INode node, IRating rating)
    {
        string selState = "selectable";
        if(rating.CheckEqual(Relation.Rating))
        {
            selState = "selected";
        }
        return $"{selState} {GetClass(node, rating)}";
    }


    private IStage Prev => Project.StageRelations[Problem.PrevRequiredRel(Relation)];
    private IStage Next => Project.StageRelations[Problem.NextRequiredRel(Relation)];


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        FromMtx.Clear();
        ToMtx.Clear();
        if (!Problem.GetMtxRelations(Relation.Main).WithZeros())
        {
            CreateMatrixes();
        }
    }
    private void CreateMatrixes()
    {
        FromMtx.Add(1, GetMatrixForRating(1));
        foreach (var rating in Ratings)
        {
            double value = rating.forRating.Value;
            FromMtx.Add(value, GetMatrixForRating(value));
            ToMtx.Add(value, GetMatrixForRating(1 / value));
        }
    }
    private IMatrix GetMatrixForRating(double value)
    {
        IMatrixRelations source = Problem.GetMtxRelations(Relation.Main);
        source.Change(Relation.From, Relation.To, value);
        return source;
    }

    Dictionary<double, IMatrix> FromMtx { get; set; } = new Dictionary<double, IMatrix>();
    Dictionary<double, IMatrix> ToMtx { get; set; } = new Dictionary<double, IMatrix>();

    private string GetClass(INode node, IRating r)
    {
        Dictionary<double, IMatrix> dictionary = node == Relation.From ? FromMtx : ToMtx;
        if (dictionary.ContainsKey(r.Value))
        {
            return dictionary[r.Value].Consistency.IsCorrect() ? "safe " : "dangerous ";
        }
        return "usual ";
    }
}
