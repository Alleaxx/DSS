@inherits DSSProject

<style>
    .sheme {
        margin: 5px;
    }

    .level {
        display: flex;
        flex-direction: column;
        align-items: center;
        border: 1px solid gainsboro;
        padding: 5px;
    }

    .level-name {
        text-align: center;
    }

    .level-index {
        font-size: 0.85em;
        color: gray;
    }

    .level-text {
        font-size: 0.9em;
    }

    .level-elements {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
    }

    .node-element {
        display: block;
        padding: 3px;
        margin: 4px;
        border: 1px solid gray;
        text-align: center;
        border-radius: 1px;
        text-decoration: none;
        font-size: 0.65em;
        min-width: 50px;
    }

        .node-element a {
            text-decoration: none;
        }

    .good {
        background-color: #dfffdf;
    }

    .bad {
        background-color: #ffdee3;
    }

    .warn {
        background-color: antiquewhite;
    }

    .best {
        background-color: #dfffdf;
    }




    .node-element:hover .actions-section {
        display: flex;
    }


    .node-element:hover .action-values-section {
        display: none;
    }

</style>

<section class="sheme">
    @foreach (var levelGroup in Problem.GroupedByLevel)
    {
    <div class="level">
        @if (ShowHeaders)
        {
            <div class="level-name">
                <span class="level-index">Ур. @levelGroup.Key -</span>
                <span class="level-text">@levelGroup.First().LevelName</span>
            </div>
        }
        <div class="level-elements">
            @foreach (var node in levelGroup)
            {
                <a class="@(GetClass(node)) node-element" href="@LinkType" @onclick="() => SetNowMatched(node)">
                    <span>
                        @if (DisplayProperty != null)
                        {
                            @FormatNumber(DisplayProperty(node)) <span>| </span>
                        }@node.Name
                    </span>
                </a>
            }
        </div>
    </div>
    }
</section>



@code {
    //Выделение элементов
    //По лучшим
    //По проблемным
    //По выбранному

    [Parameter]
    public bool ShowHeaders { get; set; } = true;
    [Parameter]
    public Func<INode, double> DisplayProperty { get; set; } = (node) => node.Coefficient;

    [Parameter]
    public ViewSelections ViewSelection { get; set; } = HierShemeBig.ViewSelections.Selection;
    public enum ViewSelections
    {
        Selection, Best, Relations
    };

    [Parameter]
    public string LinkType { get; set; } = RelationsLink;

    private void SetNowMatched(INode node)
    {
        if(ViewSelection == ViewSelections.Selection)
        {
            SetNow(node);
        }
        else
        {
            SetNow(Problem.FirstRequiredRelation(node));
        }
    }

    private string GetClass(INode node)
    {
        string tag = "usual";

        switch (ViewSelection)
        {
            case ViewSelections.Best:
                if (Problem.Best(node.Level).Contains(node))
                    return "best";
                break;
            case ViewSelections.Relations:
                double res = Problem.GetMtxRelations(node).Consistency.Cr;
                if (RelationState.IsNodeUnknown(node))
                    return "warn";
                if (!RelationState.IsNodeConsistenct(node))
                    return "bad";
                return "good";
            case ViewSelections.Selection:
                if (node == Project.NodeSelected)
                    return "good";
                break;
        }
        return tag;
    }
}

