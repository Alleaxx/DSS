@page "/node"
@inherits DSSProject
@layout EditorLayout

<style>

    .navigation{
        width: 30%;
    }
    .navigation h5{
        margin: 5px 0;
    }
    .navigation-element{
        font-size: 1em;
        cursor: pointer;
        color:gray;
    }
    .navigation-element.active{
        color: black;
    }
    .navigation-element:hover{
        color: rgb(64,64,64);
    }
    .structure-list {
        margin: 4px 0;
    }


    .edit{
        width: 70%;
        padding-right: 20px;
        border-left: 1px solid gainsboro;
        padding-left: 15px;
    }
    .rels{

    }
    .rels a{
        text-decoration: none;
        margin-top: 2px;
    }
    .rels a:hover{
        text-decoration: none;
    }

    dt{
        margin-bottom: 5px;
    }

    .relations-all-list{
        padding-left: 1em;
    }
    .relations-all-list a{
        font-size: 0.8em;
        text-decoration: none;
    }

    .problem-info{
        padding: 8px 0;
        border-bottom: 1px solid gainsboro;
        margin-bottom: 5px;
    }
</style>
<div>
    <section class="problem-info">
        <h2>Структура иерархии</h2>
        <details>
            <summary>
                <span>JSON-схема</span>
            </summary>
            <textarea id="jsonsheme" rows="15" cols="50">
                @JsonSheme()
            </textarea>
        </details>
    </section>

    <section class="row">
        <section class="navigation">
            <h3>Список узлов</h3>
            @foreach (var levelGroup in Problem.Dictionary)
            {
                <div style="margin-left:@GetEmPadding(levelGroup)em;">
                    <span>@Name(levelGroup):</span>
                    <ul class="structure-list">
                        @foreach (var node in levelGroup.Value)
                        {
                            <li>
                                <span class="@(node == Node ? "active" : "") navigation-element" @onclick="() => SetNow(node)">
                                    @node.Name
                                </span>
                            </li>
                        }
                    </ul>
                </div>
            }
        </section>
        <section class="edit">
            <h3>Редактирование</h3>
            <dl>
                <dt>
                    <label for="nodename">
                        Название:
                    </label>
                </dt>
                <dd>
                    <input id="nodename" type="text" @bind-value="@Node.Name" />
                </dd>
                <dt>
                    <label for="nodedescr">
                        Краткое описание:
                    </label>
                </dt>
                <dd>
                    <input id="nodedescr" type="text" @bind-value="@Node.Description" />
                </dd>
                <dt>Отношения:</dt>
                <dd>
                    @if (HasRelations())
                    {
                        <ul class="relations-all-list">
                            @foreach (var rel in RelationsFrom())
                            {
                                <li>
                                    <NavLink href="@RelationsLink" @onclick="() => SetNow(rel)">
                                        @rel.From.Name @rel.GetTextRelation() @rel.To.Name по @rel.Main.Name
                                    </NavLink>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>Отношений с элементами этого же уровня нет</p>
                    }
                </dd>
                <dt>Матрица отношений:</dt>
                <dd>
                    <DSSAlternative.Pages.Отношения.NodeMatrix Node="@Node" />
                </dd>
            </dl>
        </section>
    </section>
</div>


@code {
    public INode Node => Project.NodeSelected;

    private IEnumerable<INodeRelation> RelationsFrom()
    {
        return Project.ProblemActive.RelationsAll.Where(r => r.From == Node && !r.Self);
    }
    private bool HasRelations()
    {
        return RelationsFrom().Any();
    }

    private string JsonSheme()
    {
        var template = new Template(Project);
        return JsonSerializer.Serialize(template, DSSApp.JsonOptions);
    }


    private string GetEmPadding(KeyValuePair<int, INode[]> group)
    {
        int level = group.Key;
        return ((double)level / 2).ToString().Replace(',', '.');
    }
    private string Name(KeyValuePair<int, INode[]> group)
    {
        int level = group.Key;
        string firstNode = group.Value.First().GetLevelName(Problem.Hierarchy);
        return $"{firstNode} ({level})";
    }
}