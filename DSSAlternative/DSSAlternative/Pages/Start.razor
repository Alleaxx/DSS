@page "/start"
@inherits DSSComponent

<div class="load-task-grid">
    <header class="load-header">
        <h2>Формирование задачи выбора</h2>
    </header>

    <section class="load-own">
        <section>
            <h3>Создание с нуля</h3>
            <p class="load-note">
                Формирование иерархии проблемы с нуля. Подходит для нетипичных задач.
            </p>
            <input type="button" @onclick="LoadOwn" value="Создать" />
        </section>

        <section>
            <h3>Загрузка образца</h3>
            <p class="load-note">
                Образцовая задача показывает возможности системы на примере уже решенной проблемы.
            </p>
            <input type="button" @onclick="LoadExample" value="Загрузить" />
            <br />
            <input type="button" @onclick="LoadEx1" value="Образец задачи с подкритериями" />
            <br />
            <input type="button" @onclick="LoadEx2" value="Образец задачи с подкритериям II" />
        </section>

        <section>
            <h3>Загрузка сохраненной задачи</h3>
            <p class="load-note">
                <span>@JSONLoadResult</span>
            </p>
            <textarea class="load-json" rows="5" @onchange="LoadJSON"></textarea>
        </section>
    </section>

    <section class="load-preset">
        <h3>Модификация шаблона</h3>
        <p class="load-note">
            Позволяет задать типовую задачу, которую можно изменить под свои условия.
        </p>
        <ul class="presets">
            <CascadingValue Value="this">
                @foreach (var template in Templates)
                {
                    <li>
                        <HierTemplate Template="template"></HierTemplate>
                    </li>
                }
            </CascadingValue>
        </ul>
    </section>

    <section class="loaded">
        <h3>Открытые задачи</h3>
        <p class="load-note">
            Список уже загруженных задач выбора.
        </p>
        <ul class="problems">
            @foreach (IProject project in Projects)
            {
                <ProjectTask Project="project" Removed="() => StateHasChanged()">
                    
                </ProjectTask>
            }
        </ul>
    </section>
</div>



@code {
    private void LoadOwn()
    {
        DSSApp.AddProject(DSSExample.CreateNewProblem());
    }
    public void LoadTemplate(ITemplate template)
    {
        DSSApp.AddProject(new Project(template));
        StateHasChanged();
    }

    private void LoadExample()
    {
        DSSApp.AddProject(DSSExample.CreateSampleProblem());
    }
    private void LoadEx1()
    {
        DSSApp.AddProject(DSSExample.CreateSampleTreeProblem());
    }
    private void LoadEx2()
    {
        DSSApp.AddProject(DSSExample.CreateSampleTree2Problem());
    }


    private string JSONLoadResult { get; set; } = "Вставка JSON-текста";
    private void LoadJSON(ChangeEventArgs e)
    {
        string json = e.Value.ToString();
        try
        {
            ITemplate obj = JsonSerializer.Deserialize<Template>(json);
            DSSApp.AddProject(new Project(obj));
            JSONLoadResult = "Проблема успешно загружена";
        }
        catch (JsonException ex)
        {
            JSONLoadResult = "Неверный формат данных, попробуйте ещё раз";
            Console.WriteLine(ex.Message);
        }
    }
}
