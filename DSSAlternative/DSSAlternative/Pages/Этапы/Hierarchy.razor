@page "/hierarchy"
@inherits DSSProject
@layout EditorLayout



<style>
    .basic-border {
        border: 1px solid gainsboro;
        border-radius: 3px;
        margin: 3px;
        padding: 5px;
    }

    .sheme {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }



    .col-own {
        display: flex;
        flex-direction: column;
    }

    .level {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid gainsboro;
    }


    .level-name {
        text-align: center;
        width: 150px;
    }

    .level-index {
        color: gray;
        font-size: 0.9em;
    }

    .level-elements {
        display: flex;
        flex-flow: row wrap;
        justify-content: center;
        margin: 5px 0;
    }

    .level-add {
    }

    .node-element {
        display: flex;
        padding: 2px 5px;
        padding-right: 0;
        margin: 8px;
        border: 1px solid gray;
        min-width: 15%;
        border-radius: 2px;
    }

    .add {
        color: green;
        border: 2px solid lightgreen;
        background: transparent;
        padding: 5px 30px;
        font-size: 1em;
    }

        .add:hover {
            background-color: lightgreen;
            cursor: pointer;
        }

    .remove {
        color: red;
        font-size: 1em;
        margin: 0;
        padding: 5px 8px;
        background-color: transparent;
        border: 0;
        border-left: 1px solid gainsboro;
    }

        .remove:hover {
            background-color: lightpink;
            cursor: pointer;
        }


    .input-text {
        width: 100%;
        font-size: 0.85em;
        border: 0;
        padding: 10px 0;
        text-align: center;
    }

    .confirm {
        margin: 10px;
        display: flex;
        align-items: center;
    }

        .confirm .add {
            margin: 0 2em;
        }

        .hier-fails{
            display: flex;
            margin: 0 10px;
        }
        .hier-fail{
            border: 2px solid red;
            border-radius: 3px;
            font-size: 0.8em;
            width: 2em;
            cursor: pointer;
            text-align: center;
            padding: 1px 4px;
            margin: 0 4px;
        }
        .hier-fail:hover{
            background-color: lightpink;
        }

    .main-goal-level {

    }
    .main-goal-level .level-index{
        display:none;
    }
    .main-goal-level .level-name{
        font-size: 1.4em;
    }
    .main-goal-level br{
        display: none;
    }
    .main-goal-level .level-add{
        visibility: hidden;
    }
        .main-goal-level .node-element {
            min-width: 14em;
            font-size: 1.25em;
        }
        .main-goal-level .remove{
            display: none;
        }




    .new-level {
        padding: 10px 0;
    }
        .new-level .level-name{
            color: gray;
        }

    .information {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        border-top: 1px solid whitesmoke;
        border-bottom: 1px solid whitesmoke;
        padding: 14px 0;
        margin: 5px 10px;
        font-size: 0.9em;
    }

    .property-name {
        color: gray;
    }

    .property-value {
        margin-right: 2em;
        margin-left: 4px;
    }

    .not-saved, .all-saved, .warning {
    }

    .not-saved {
        color: darkgoldenrod;
    }

    .warning {
        color: darkred;
    }

    .all-saved {
        color: green;
    }

    .json-sheme{
        margin: 20px 0;
    }

    .node-main-element{
        border: 3px solid orange;
    }

    .node-controlled-element {
        border: 3px solid red;
    }
</style>

<section>
    <h2 class="content-header-h">Редактирование иерархии задачи выбора</h2>
    <div class="sheme basic-border">
        <div class="confirm">
            <div>
                @if (Project.UnsavedChanged && HierEditState.Result)
                {
                    <span class="not-saved">Есть несохраненные изменения</span>
                    <input class="add" type="button" value="Подтвердить текущую иерархию" @onclick="UpdateHierarchy" />
                }
                else if (Project.UnsavedChanged && !HierEditState.Result)
                {
                    <span class="warning">В структуре иерархии обнаружены ошибки:</span>
                }
                else
                {
                    <span class="all-saved">Все изменения сохранены</span>
                    <NavLink class="navigation-link" href="@RelationsLink">
                        Перейти к определению связей
                    </NavLink>
                    <NavLink class="navigation-link" href="@ViewLink">
                        Обзор задачи
                    </NavLink>
                    <input type="button" value="Вывести новую структуру" @onclick="ShowStructure" />
                }
            </div>
            <div class="hier-fails">
                @foreach (var check in HierEditState.Checks)
                {
                    <div class="@check.CssClass()" title="@check.Message">
                        @check.Name
                    </div>
                }
            </div>
        </div>

        <div class="information">
            <div>
                <span class="property-name">Уровней: </span>
                <span class="property-value">@ProblemEditing.LevelsCount</span>
            </div>
            <div>
                <span class="property-name">Узлов: </span>
                <span class="property-value">@ProblemEditing.NodesCount</span>
            </div>
            <div>
                <span class="property-name">Отношений: </span>
                <span class="property-value">@ProblemEditing.RelationsCount</span>
            </div>
            <div>
                <span class="property-name">~ Времени на решение: </span>
                <span class="property-value">@ProblemEditing.EstTime.Minutes мин. @ProblemEditing.EstTime.Seconds сек.</span>
            </div>
        </div>

        <div>
            @foreach (var levelGroup in ProblemEditing.GroupedByLevel)
            {
                <section class="level @(levelGroup.Key == 0 ? "main-goal-level" : "")">
                    <div class="level-name">
                        <span class="level-index">Уровень @levelGroup.Key</span>
                        <br>
                        <span>@levelGroup.ElementAt(0).LevelName</span>
                        <br />

                    </div>
                    <div class="level-elements">
                        @foreach (var node in levelGroup)
                        {
                            <div class="@($"{(NodeHovered != null && NodeHovered.Criterias.Group.Contains(node) ? "node-main-element" : "")} node-element")" @onclick="@(() => NodeHovered = node)">
                                <input class="input-text" type="text" @bind-value="@node.Name" />
                                <input class="remove" type="button" value="X" @onclick="@(() => RemoveNode(node))" />
                            </div>
                        }
                    </div>

                    <div class="level-add">
                        <input class="add" type="button" value="+" @onclick="@(() => AddNode(levelGroup.Key))" />
                    </div>

                </section>
            }
            <section class="level new-level">
                <div class="level-name">
                    <span>Уровень @ProblemEditing.LevelsCount</span>
                </div>
                <input class="add " type="button" value="++" @onclick="@(() => AddNode(ProblemEditing.LevelsCount))" />
                <input class="add" type="button" value="+" style="visibility:hidden" />
            </section>

        </div>
    </div>

    <section>
        <h3>Группы критериев</h3>
        <ul>
            @foreach (var group in Template.Groups)
            {
                <li>
                    <b>@group.Index</b>: <span>@(string.Join<INode>(',',group.Group))</span>
                </li>
            }
        </ul>

        <style>
            .node-table-edit {
                border: 1px solid gainsboro;
                padding: 10px;
                font-size: 0.9em;
            }

            .node-table-edit-header {
            }

                .node-table-edit-header th {
                    border-bottom: 1px solid gainsboro;
                }

            .node-table-edit-node {
            }

                .node-table-edit-node .edit-text {
                    border-right: 1px solid gainsboro;
                }

            .edit-cell input[type="number"] {
                text-align: center;
                padding: 5px 10px;
                border: 0;
                border-bottom: 1px solid gainsboro;
            }

            .edit-cell input[type="text"] {
                padding: 5px 10px;
                border: 0;
                border-bottom: 1px solid gainsboro;
            }
        </style>
        <table class="node-table-edit">
            <tr class="node-table-edit-header">
                <th>Тип</th>
                <th>Имя</th>
                <th>Уровень</th>
                <th>Группа критериев</th>
                <th>Подчинена группе</th>
                <th>Описание</th>
            </tr>
            @foreach (var node in Problem.Hierarchy.OrderBy(n => n.Level))
            {
                <tr class="node-table-edit-node">
                    <td class="edit-text" style="text-align:center">
                        <span class="node-text">@node.LevelName</span>
                    </td>
                    <td class="edit-cell">
                        <input type="text" @bind-value="@node.Name" />
                    </td>
                    <td class="edit-cell">
                        <input type="number" @bind-value="@node.Level" />
                    </td>
                    <td class="edit-cell">
                        <input type="number" @bind-value="@node.Group" />
                    </td>
                    <td class="edit-cell">
                        <input type="number" @bind-value="@node.GroupIndex" />
                    </td>
                    <td class="edit-cell">
                        <input type="text" @bind-value="@node.Description" />
                    </td>
                </tr>
            }
        </table>

    </section>

    <section class="json-sheme">
        <details>
            <summary rows="25" cols="25">
                JSON-схема
            </summary>
            <textarea rows="20" cols="100">
                 @JsonCurrent
            </textarea>
        </details>
    </section>

</section>


@code {
    private Template TemplateCurrent => new Template(NodesEditing.OfType<Node>().ToArray())
    {
        Name = ProblemEditing.MainGoal.Name,
        Img = "Images/tech.png",
        Description = "Сохраненная задача выбора"
    };
    private string JsonCurrent => JsonSerializer.Serialize<Template>(TemplateCurrent, DSSApp.JsonOptions);

    private INode NodeHovered { get; set; }


    private IHierarchy ProblemEditing => Project.ProblemEditing;
    private ITemplate Template => Project.TemplateEditing;
    private List<Node> NodesEditing => Template.Nodes;


    //Подтверждение иерархии
    private void UpdateHierarchy() => Project.UpdateProblemFromEditing();


    //Редактирование иерархии
    private void AddNode(int level = -1)
    {
        level = level == -1 ? ProblemEditing.LevelsCount - 1 : level;
        INode newNode = new Node(level, "Узел", level, level - 1);
        NodesEditing.Add(newNode as Node);
    }
    private void RemoveNode(INode e)
    {
        if (e != ProblemEditing.MainGoal)
            NodesEditing.Remove(e as Node);
    }


    private void ShowStructure()
    {
        Console.WriteLine("Новая структура");
        foreach (var node in Problem.Hierarchy)
        {
            Console.WriteLine($"{node.Level} - {node.Name}:");
            Console.Write("Расчет: ");
            foreach (var countNode in node.Criterias.Group)
            {
                Console.Write($"{countNode.Name}, ");
            }
            Console.WriteLine(new MtxRelations(Problem, node).GetText());
            Console.WriteLine("Матрица локальных");
            Console.WriteLine(new MtxLocalCoeffs(Problem, node).GetText());
            Console.WriteLine("Матрица глобальных");
            Console.WriteLine(new MtxGlobalCoeffs(node).GetText());
            Console.WriteLine("Матрица коэфф.");
            Console.WriteLine(new MtxCoeffs(Problem, node).GetText());
            Console.WriteLine();
        }
    }
}
