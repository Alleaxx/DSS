@page "/node"
@inherits DSSProject
@layout EditorLayout

<style>

    .problem-info {
        padding: 8px 0;
        border-bottom: 1px solid gainsboro;
        margin-bottom: 5px;
    }


    .navigation{
        flex: 3;
    }
    .navigation h5{
        margin: 5px 0;
    }
    .navigation-element{
        font-size: 1em;
        cursor: pointer;
        color:gray;
    }
    .navigation-header{
        font-size: 0.9em;
    }
    .navigation-element.active{
        color: black;
    }
    .navigation-element:hover{
        color: rgb(64,64,64);
    }
    .navigation-list {
        margin: 4px 0;
        list-style-type: circle;
    }


    .edit{
        flex: 7;
        padding-right: 20px;
        border-left: 1px solid gainsboro;
        padding-left: 15px;
    }
    .relations-list {
        padding-left: 1em;
    }
        .relations-list a {
            font-size: 0.8em;
            text-decoration: none;
        }


    dt{
        font-size: 0.9em;
        margin-bottom: 5px;
    }


</style>

<style>
    .actions-section {
        display: flex;
        flex-wrap: wrap;
        margin: 5px 0;
    }

    .action {
        display: flex;
        padding: 3px 5px;
        border: 1px solid silver;
        border-radius: 1px;
        font-size: 0.9em;
        margin: 5px 1px;
        cursor: pointer;
    }

    a.action{
        text-decoration: none;
        color: royalblue;
    }
        a.action:hover {
            color: black;
        }
    .action:hover .action-icon {
        opacity: 100%;
    }

    .action-icon {
        height: 16px;
        margin: auto;
        opacity: 50%;
    }
    a.clear-relations:hover {
        border: 1px solid red;
        color: red;
    }
</style>
<div>
    @*<section class="problem-info">
        <h2>Структура иерархии</h2>
        <details>
            <summary>
                <span>JSON-схема</span>
            </summary>
            <textarea id="jsonsheme" rows="15" cols="50">
                @JsonSheme()
            </textarea>
        </details>
    </section>*@

    <section class="row">
        <section class="navigation">
            <h3>Схема иерархии</h3>
            <div>
                <HierShemeBig LinkType="@NodeLink"></HierShemeBig>
            </div>
        </section>
        <section class="edit">
            <h3>Редактирование '@Node.Name'</h3>
            @Node.LevelName
            <dl>
                <dt>
                    <label for="nodename">
                        Название:
                    </label>
                </dt>
                <dd>
                    <input id="nodename" type="text" @bind-value="@Node.Name" />
                </dd>
                <dt>
                    <label for="nodedescr">
                        Краткое описание:
                    </label>
                </dt>
                <dd>
                    <input id="nodedescr" type="text" @bind-value="@Node.Description" />
                </dd>
                <dt>Итоговый коэффициент:</dt>
                <dd>
                    <span>
                        @FormatNumber(Node.Coefficient)
                    </span>
                </dd>
                <dt>Согласованность (Cr):</dt>
                <dd>
                    <span>
                        @FormatNumber(Problem.GetMtxRelations(Node).Consistency.Cr)
                    </span>
                </dd>
                <dt>Отношения:</dt>
                <dd>
                    <div>
                        @if (HasRelations())
                        {
                            <ul class="relations-list">
                                @foreach (var rel in RelationsOwned())
                                {
                                    <li>
                                        <NavLink href="@RelationsLink" @onclick="() => SetNow(rel)">
                                            @rel.From.Name @rel.Rating.Name @rel.To.Name
                                        </NavLink>
                                    </li>
                                }
                            </ul>
                        }
                    </div>

                    <div class="actions-section">
                        @if (Problem.NodesWithRels.Contains(Node))
                        {
                            <a class="action edit-relations" href="@RelationsLink" @onclick="() => Project.SetNow(Project.GetRelFromNode(Node))">
                                <span class="action-name">Установить связи</span>
                                <img class="action-icon" src="Images/play.png" />
                            </a>
                            <a class="action clear-relations" href="@NodeLink" @onclick="@(() => Problem.ClearRelations(Node))" role="button">
                                <span class="action-name">Сбросить все связи</span>
                                <img class="action-icon" src="Images/tech.png" />
                            </a>
                        }
                    </div>
                </dd>
                <dt>Матрица отношений:</dt>
                <dd>
                    <DSSAlternative.Pages.Отношения.NodeMatrix Node="@Node" />
                </dd>
            </dl>
        </section>
    </section>
</div>


@code {
    public INode Node => Project.NodeSelected;

    private IEnumerable<INodeRelation> RelationsOwned()
    {
        return Project.ProblemActive.RelationsAll.Where(r => r.Main == Node && !r.Self);
    }
    private bool HasRelations()
    {
        return RelationsOwned().Any();
    }

    private string JsonSheme()
    {
        var template = new Template(Project);
        return JsonSerializer.Serialize(template, DSSApp.JsonOptions);
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Project.OnNodeChanged += () => StateHasChanged();
    }


    private string GetEmPadding(KeyValuePair<int, INode[]> group)
    {
        int level = group.Key;
        return ((double)level / 2).ToString().Replace(',', '.');
    }
    private string Name(KeyValuePair<int, INode[]> group)
    {
        int level = group.Key;
        string firstNode = group.Value.First().GetLevelName(Problem.Hierarchy);
        return $"{firstNode} ({level})";
    }

}